partial search and analysis:
http://stackoverflow.com/questions/17940026/partial-search-using-analyzer-in-elasticsearch

to see analysis:
https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-analyze.html

for amount of shards:
"Elasticsearch provides the ability to subdivide your index into multiple pieces called shards. When you create an
index, you can simply define the number of shards that you want. Each shard is in itself a fully-functional and
independent “index” that can be hosted on any node in the cluster.
The challenge is to figure out the right number of shards, because you only get to make the decision once per index.
And it impacts both performance, storage and scale, since queries are sent to all shards.
To decide how many shards to start with, you need to consider how big the index might grow — by size, by query volume,
and by write load.
The Elastic team recommends starting with one shard, sending “realistic” traffic, and seeing where it breaks. Then add
more shards and retest until you find the right number.
note: if you will need to reshard...then you need to copy all docs of old index to a new index...to be sure you are
having evereything you need, keep track of a version (on which reshard) each document was created/saved."

for scripts:
Scripting is supported in many APIs including search, sorting, aggregations, and document updates. Scripts can be
passed in as part of the request, retrieved from the special .scripts index, or loaded from disk.
to see how to add in an array:
https://www.elastic.co/guide/en/elasticsearch/guide/current/partial-updates.html



def search(uri, term):
    """Simple Elasticsearch Query"""
    query = json.dumps({
        "query": {
            "match": {
                "content": term
            }
        }
    })
    response = requests.get(uri, data=query)
    results = json.loads(response.text)
    return results


r = requests.post(url, data = json.dumps({"text": ftext, "name": file}))


to use try except :
try:
    print "something"
except Exception as inst:
    print type(inst)
    print inst

to raise an exception:
raise Exception('some exception')


search with wildcards:
Ma?s — Will match Mars, Mass, and Maps
Ma*s — Will match Mars, Matches, and Massachusetts


analysis:
https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis.html
tokenizers:
https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-tokenizers.html?__hstc=62641971.f3a72a737870c5077542439680586ddb.1470872193294.1470872193294.1470872193294.1&__hssc=62641971.1.1470872193296&__hsfp=2977536404?__hstc=62641971.f3a72a737870c5077542439680586ddb.1470872193294.1470872193294.1470872193294.1&__hssc=62641971.1.1470872193296&__hsfp=2977536404
explanation:
http://blog.tryolabs.com/2015/02/25/elasticsearch-analyzers-or-how-i-learned-to-stop-worrying-and-love-custom-filters/

to run it as a windows service and shut it down:
http://www.howtogeek.com/50786/using-srvstart-to-run-any-application-as-a-windows-service/
https://www.elastic.co/guide/en/elasticsearch/reference/2.1/setup.html#setup-installation-pid

to check cluster health( not red! ):
https://www.elastic.co/guide/en/elasticsearch/guide/current/_cluster_health.html

how to query with many parameters!!:only some fields and so on!:
https://www.elastic.co/guide/en/elasticsearch/reference/0.90/query-dsl-query-string-query.html
(also field query)


GET /medical_info_extraction/patient/_search?pretty=true"
{
    "fields" : ["title"],
    "query" : {
        "term" : {"lab_result.description" : "TSH"}
    }
}

this works!!:
PUT /neoindex
{
    "settings": {
        "analysis": {
            "char_filter":{
                "&_to_and": {
                    "type":"mapping",
                    "mappings": [ "&=> and "]
                }
            },
            "filter": {
                "my_stopwords": {
                    "type":"stop",
                    "stopwords": [ "the", "a" ]
                }
            },
            "analyzer": {
                "my_analyzer": {
                    "type": "custom",
                    "char_filter":  [ "html_strip", "&_to_and" ],
                    "tokenizer":"standard",
                    "filter":  [ "lowercase", "my_stopwords" ]
                }
            }
        }
    }
}
GET /neoindex/_analyze?analyzer=my_analyzer&text='The quick & brown fox'



for dutch:
{
  "settings": {
    "analysis": {
      "filter": {
        "dutch_stop": {
          "type":       "stop",
          "stopwords":  "_dutch_"
        },
        "dutch_keywords": {
          "type":       "keyword_marker",
          "keywords":   []
        },
        "dutch_stemmer": {
          "type":       "stemmer",
          "language":   "dutch"
        },
        "dutch_override": {
          "type":       "stemmer_override",
          "rules": [
            "fiets=>fiets",
            "bromfiets=>bromfiets",
            "ei=>eier",
            "kind=>kinder"
          ]
        }
      },
      "analyzer": {
        "dutch": {
          "tokenizer":  "standard",
          "filter": [
            "lowercase",
            "dutch_stop",
            "dutch_keywords",
            "dutch_override",
            "dutch_stemmer"
          ]
        }
      }
    }
  }
}

https://www.compose.com/articles/how-scoring-works-in-elasticsearch/
(deixnei pos ipologizetai to score sto ES)

how to search in ES:
https://compose.com/articles/elasticsearch-query-time-strategies-and-techniques-for-relevance-part-i/

to find tf-idf from es:
http://dharmicdata.com/the-tf-idf-score-in-elastic-search/
or
https://gist.github.com/konradkonrad/2f66dc46e324feec706b

the scroll api( to get huge amount of results...reindex..):
https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-scroll.html
